{
    "swagger": "2.0",
    "info": {
        "title": "Issues",
        "version": "v1",
        "description": "Issue Service\r\n\r\nView, create, and edit details of issues that have been raised in a CONNECT project or context, as well as their comments, attached files, and change history.  Retrieval of form definitions (which define how to display an issue in an interactive UI) is also supported, though customization of them is not (and should be done by a project administrator through the CONNECT Issues web application, if needed)."
    },
    "host": "api.bentley.com",
    "basePath": "/issues/v1",
    "schemes": [
        "https"
    ],
    "securityDefinitions": {
        "apiKeyHeader": {
            "type": "apiKey",
            "name": "X-Api-Subscription-Key",
            "in": "header"
        },
        "apiKeyQuery": {
            "type": "apiKey",
            "name": "subscription-key",
            "in": "query"
        },
        "oauth2Bentley OAuth2 Service": {
            "type": "oauth2",
            "scopes": {
                "issues:read issues:modify": ""
            },
            "flow": "accessCode",
            "authorizationUrl": "https://ims.bentley.com/connect/authorize",
            "tokenUrl": "https://ims.bentley.com/connect/token"
        }
    },
    "security": [
        {
            "oauth2Bentley OAuth2 Service": [
                "issues:read issues:modify"
            ]
        },
        {
            "apiKeyHeader": [],
            "oauth2Bentley OAuth2 Service": [
                "issues:read issues:modify"
            ]
        },
        {
            "apiKeyQuery": [],
            "oauth2Bentley OAuth2 Service": [
                "issues:read issues:modify"
            ]
        }
    ],
    "paths": {
        "/formDefinitions/{id}": {
            "get": {
                "description": "---\r\n\r\nGets the full form definition with the specified ID.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-form-definition-by-id",
                "summary": "Get form definition by ID",
                "tags": [
                    "FormDefinitions"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the form definition to get. This should be an ID retrieved from the \"Get project form definitions\" endpoint or an issue's \"formId\" property.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Form Definition Details Response"
                        },
                        "examples": {
                            "application/json": {
                                "formDefinition": {
                                    "id": "e5Ue5Ue5U02hNz19awLcRgpmdo8phxZEhB123456789",
                                    "displayName": "Sample Form",
                                    "type": "Punchlist",
                                    "status": "Approved",
                                    "definition": "{\"Form\":{\"Width\":520,\"Height\":750,\"Controls\":[{\"Panel\":{\"ElementId\":\"f8b4b07c700247ee8e7be81ca9ef6528\",\"Name\":\"Canvas\",\"DisplayLabel\":\"Canvas\",\"Type\":\"Panel\",\"IsPercent\":false,\"Height\":0,\"MaxHeight\":0,\"Width\":0,\"Binding\":\"\",\"TopPosition\":0,\"LeftPosition\":0,\"IsReadOnly\":false,\"IsRequired\":false,\"StyleGroup\":\"\",\"IsCollapsible\":false,\"IsCollapsed\":false,\"ShowWindSpeed\":false,\"LayoutType\":1,\"ContentSpacing\":16,\"ContentPadding\":8,\"Children\":[{\"TextBox\":{\"ElementId\":\"c274e01b58ae4e94884f91238f65f582\",\"Name\":\"Textbox#7cf1d\",\"DisplayLabel\":\"\",\"Type\":\"TextBox\",\"FileId\":1,\"IsPercent\":true,\"Height\":38,\"MaxHeight\":0,\"Width\":50,\"Binding\":\"_Description\",\"TopPosition\":111,\"LeftPosition\":17,\"IsReadOnly\":false,\"IsRequired\":false,\"StyleGroup\":\"\",\"IsCollapsible\":false,\"IsCollapsed\":false,\"ShowWindSpeed\":false,\"IsSingleLine\":true}}]}}],\"StyleGroups\":[],\"DataBindings\":[{\"DataBinding\":{\"Binding\":\"_Description\",\"ElementId\":\"c274e01b58ae4e94884f91238f65f582\",\"Type\":\"string\",\"DisplayLabel\":\"Description\"}}],\"RelatedObjects\":[{\"RelatedObject\":{\"Type\":\"DynamicSchema:Punchlist\"}}],\"GpsBindingType\":\"storeAsLatLong\",\"GpsFirstBinding\":\"Latitude\",\"GpsSecondBinding\":\"Longitude\"}}"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the form definition with the specified ID does not exist or is inaccessible to the user.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "FormDefNotFound",
                                    "message": "The form definition with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/{id}/attachments": {
            "get": {
                "description": "---\r\n\r\nRetrieves the metadata for all files attached to the given issue. In order to get the contents of a file itself, use the `Get attachment file by ID` endpoint, passing the `id` from the metadata object returned by this request as the `attachmentId` parameter of that request.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-issue-attachments",
                "summary": "Get issue attachments",
                "tags": [
                    "Attachments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue to get attachments for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Attachment Metadata List"
                        },
                        "examples": {
                            "application/json": {
                                "attachments": [
                                    {
                                        "id": "XZzxOCC8sVvUcgeXz1Ih_exlLgPfRTpAuShXz1cTpAu",
                                        "fileName": "CrackedConcrete.png",
                                        "createdDateTime": "2020-10-20T16:16:30.670432Z",
                                        "size": "34770",
                                        "caption": "Picture of the cracked concrete",
                                        "binding": "TypeOfDefect",
                                        "type": "png"
                                    },
                                    {
                                        "id": "XZzxOCC8sVvUcgeXz1Ih_exlLgPfRTpAuShXz1cTpAu",
                                        "fileName": "StreetView.png",
                                        "createdDateTime": "2020-10-20T16:08:30.2804722Z",
                                        "size": "56893",
                                        "caption": "Picture showing the bridge from the perspective of an approaching car",
                                        "binding": null,
                                        "type": "png"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the specified issue does not exist or is inaccessible to the user.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "IssueNotFound",
                                    "message": "The issue with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            },
            "post": {
                "description": "---\r\n\r\nAdds a new attachment to the specified issue. This only creates the attachment metadata; the file will need to be uploaded through a subsequent PUT call to the URL returned in the Location header of this endpoint's response.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:modify*.\r\n\r\n---",
                "operationId": "add-attachment-to-issue",
                "summary": "Add attachment to issue",
                "tags": [
                    "Attachments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue to add an attachment to.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:modify'",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "attachment Metadata-create",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Attachment Metadata-create"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Indicates that the attachment metadata was created successfully. The file should then be uploaded via PUT to the URL in the Location header.",
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "The URL where the attachment file should be uploaded."
                            }
                        }
                    },
                    "400": {
                        "description": "This response indicates that there is a problem with the request. Most likely, the 'includeHeader' parameter is included but not set to true or false.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "RequiredPropertyMissing",
                                    "message": "The request body must include a 'fileName' property."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the user attempted to add an attachment to an issue that does not exist or is inaccessible to the user.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "IssueNotFound",
                                    "message": "The issue with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/{id}/attachments/{attachmentId}": {
            "delete": {
                "description": "---\r\n\r\nDeletes the specified attachment (including both its metadata and file) from the specified issue.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:modify*.\r\n\r\n---",
                "operationId": "delete-attachment",
                "summary": "Delete attachment",
                "tags": [
                    "Attachments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue to delete an attachment from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "attachmentId",
                        "in": "path",
                        "description": "The ID of the attachment to delete.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:modify'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Indicates that the attachment was successfully deleted. There is no response body in this case."
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the attachment with the specified ID does not exist or is inaccessible to the user.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "AttachmentNotFound",
                                    "message": "The attachment instance with the given ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            },
            "get": {
                "description": "---\r\n\r\nRetrieves the actual file contents for the attachment with the given ID. This API will attempt to infer the MIME type to return from the file's extension, but will return the default value of `application/octet-stream` if it does not recognize the extension.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-attachment-by-id",
                "summary": "Get attachment file by ID",
                "tags": [
                    "Attachments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The issue ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "attachmentId",
                        "in": "path",
                        "description": "The attachment ID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The attachment's file contents"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the specified attachment does not exist (code = 'AttachmentNotFound') or that the attachment metadata instance exists but does not have an associated file (code = 'FileNotFound').",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "AttachmentNotFound",
                                    "message": "The attachment instance with the given ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            },
            "put": {
                "description": "---\r\n\r\nUploads a file's contents, associating it with the attachment metadata instance with the given ID. The request body is simply the file's bytes. If a file was already uploaded for the attachment with the given ID, that file will be overwritten.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:modify*.\r\n\r\n---",
                "operationId": "upload-attachment-file",
                "summary": "Upload attachment file",
                "tags": [
                    "Attachments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue this attachment belongs to.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "attachmentId",
                        "in": "path",
                        "description": "The ID of the attachment metadata instance this file will be associated with.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:modify'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Indicates that the attachment file was successfully uploaded"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the specified attachment metadata instance does not exist or is inaccessible to the user.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "AttachmentNotFound",
                                    "message": "The attachment metadata instance with the given ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/": {
            "post": {
                "description": "---\r\n\r\nCreates a new issue. The user must specify the ID of a form definition to associate the issue with; that will set its issue type as well as determine how clients such as the CONNECT Issues web app will display it. The form definition ID should be obtained by calling the 'Get project form definitions' endpoint.\r\n\r\nFor compatibilty with JSON schema specifications, some property types are presented as \"All of: [some object type name]\".  This simply means the value should be a single object of that type.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:modify*.\r\n\r\n---",
                "operationId": "create-issue",
                "summary": "Create issue",
                "tags": [
                    "Issues"
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:modify'",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "issue-create",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Issue-create"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Indicates that the issue was successfully created. The response body contains the issue's data after creation, including its id.",
                        "schema": {
                            "$ref": "#/definitions/Issue (get)"
                        },
                        "examples": {
                            "application/json": {
                                "issue": {
                                    "id": "e5Ue5Ue5U02hNz19awLcRsnTtOGubQZPhV123456789",
                                    "subject": "Unspecified material",
                                    "description": "The plans do not specify what material this support beam will be made out of.",
                                    "boundingBox": {
                                        "lowerLeftPoint3D": {
                                            "x": 0,
                                            "y": 1,
                                            "z": 2
                                        },
                                        "upperRightPoint3D": {
                                            "x": 3,
                                            "y": 4,
                                            "z": 5
                                        }
                                    },
                                    "createdBy": "Joe User",
                                    "createdDateTime": "2021-02-08T19:39:10.7421874Z",
                                    "lastModifiedBy": "Joe User",
                                    "lastModifiedDateTime": "2021-02-08T19:39:10.7421874Z",
                                    "number": "ISS-00001",
                                    "status": "Draft",
                                    "assignee": {
                                        "id": "9e399e39-0000-1111-2222-8d8a8d8a8d8a",
                                        "displayName": "Joe User"
                                    },
                                    "assignees": [],
                                    "type": "Issue",
                                    "displayName": "Unspecified material",
                                    "state": "Open",
                                    "properties": {
                                        "Priority": "Medium"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "This response indicates that there is a problem with the format of the request body. Most likely causes: The 'formId' property is missing, an unrecognized standard or custom property was added, a standard property was set in the 'properties' object instead of the top-level object, the body is invalid JSON, or a property was set to a value of the wrong type.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "InvalidBodySchema",
                                    "message": "One or more properties in the request body are invalid or unrecognized. See 'details' property for specifics.",
                                    "details": [
                                        {
                                            "code": "InvalidProperty",
                                            "message": "This property is not recognized. If it is a custom property, set it in the 'properties' object.",
                                            "target": "badProp"
                                        },
                                        {
                                            "code": "InvalidProperty",
                                            "message": "This property is not a custom property and should be set on the root object directly instead of inside the 'properties' object.",
                                            "target": "description"
                                        },
                                        {
                                            "code": "ReadOnlyProperty",
                                            "message": "This property is read-only and cannot be set by the client.",
                                            "target": "displayName"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the specified form definition does not exist (or is inaccessible due to insufficient permissions).",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "FormDefNotFound",
                                    "message": "The form definition with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            },
            "get": {
                "description": "---\r\n\r\nRetrieves a list of issues for the project with the given ID.  This only returns basic info about each issue--its ID, display name, type, and whether it is in an Open, Closed, or Draft state.  Use the \"Get Issue Details\" endpoint to see full information about a particular issue.\r\n\r\nNote that the 'projectId' query string parameter is required. It must be a valid project GUID to get issues from.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid OIDC token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-project-issues",
                "summary": "Get project issues",
                "tags": [
                    "Issues"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of issue data to get. Omit to get all types.",
                        "type": "string",
                        "enum": [
                            "Punchlist",
                            "Civil Design",
                            "Clash",
                            "Closeout",
                            "Communication",
                            "Defiiciency",
                            "Design",
                            "Field Data",
                            "Issue",
                            "Observation",
                            "Other",
                            "Risk",
                            "RFI",
                            "Task"
                        ]
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "The number of issues to get in each page. Max 1000, which is also the default if this parameter is not included.",
                        "type": "integer"
                    },
                    {
                        "name": "continuationToken",
                        "in": "query",
                        "description": "Parameter that enables continuing to the next page of the previous paged query. This must be passed exactly as it is in the response body's _links.next property. If this is specified and $top is omitted, the next page will be the same size as the previous page.",
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Required. The GUID of the project to get issues for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Issues List"
                        },
                        "examples": {
                            "application/json": {
                                "issues": [
                                    {
                                        "id": "00000000-0000-0000-0000-0000000000000",
                                        "displayName": "Design Clash",
                                        "type": "Clash",
                                        "state": "Closed"
                                    },
                                    {
                                        "id": "00000000-0000-0000-0000-0000000000001",
                                        "displayName": "Which Material?",
                                        "type": "RFI",
                                        "state": "Open"
                                    }
                                ],
                                "_links": {
                                    "self": {
                                        "href": "https://api.bentley.com/issues/?projectId=30273027-1111-2222-3333-3d7d6b02dc46&$top=2"
                                    },
                                    "next": {
                                        "href": "https://api.bentley.com/issues/?projectId=30273027-1111-2222-3333-3d7d6b02dc46&continuationToken=eyJ0b3A999990"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the issue with the specified ID does not exist or is inaccessible to the user due to insufficient permissions. (For security reasons, the response will not differ between inaccessible and missing issues.)",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "ProjectNotFound",
                                    "message": "The specified project does not exist, or you do not have permission to view it."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/{id}": {
            "delete": {
                "description": "---\r\n\r\nDeletes the issue with the specified ID.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:modify*.\r\n\r\n---",
                "operationId": "delete-issue",
                "summary": "Delete issue",
                "tags": [
                    "Issues"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue to delete.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:modify'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Indicates that the issue was successfully deleted. There is no response body in this case."
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the issue with the specified ID does not exist or is inaccessible to the user.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "IssueNotFound",
                                    "message": "The issue with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            },
            "patch": {
                "description": "---\r\n\r\nModifies the provided properties of the specified issue to match the values provided in the request.\r\n\r\nSetting a property value to null in the request will set the corresponding property value to null on the issue. However, omitting a property from the request body entirely will leave that property's current value on the issue unchanged.  Also, setting an object (other than \"properties\") to null will have the same effect as setting each individual property in that object to null.\r\n\r\nFor compatibilty with JSON schema specifications, some property types are presented as \"All of: [some object type name]\".  This simply means the value should be a single object of that type.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:modify*.\r\n\r\n---",
                "operationId": "modify-issue",
                "summary": "Update issue",
                "tags": [
                    "Issues"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue to modify.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:modify'",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "issue (update)",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Issue (update)"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Indicates that the changes were successfully made. The response body contains the issue's data after modification, including both changed and unchanged properties. Note: If a workflow transition occurred, some properties may have been automatically changed in addition to the properties the client specified to change in the request.",
                        "schema": {
                            "$ref": "#/definitions/Issue (get)"
                        },
                        "examples": {
                            "application/json": {
                                "issue": {
                                    "id": "e5Ue5Ue5U02hNz19awLcRrghqUtX-xBOi4123456789",
                                    "subject": "Unspecified material (v1.2)",
                                    "description": "The plans do not specify what material this support beam is made of. Updated bounding box for v1.2 of the blueprint.",
                                    "boundingBox": {
                                        "lowerLeftPoint3D": {
                                            "x": 1,
                                            "y": 2,
                                            "z": 3
                                        },
                                        "upperRightPoint3D": {
                                            "x": 4,
                                            "y": 5,
                                            "z": 6
                                        }
                                    },
                                    "createdBy": "Joe User",
                                    "createdDateTime": "2020-11-11T19:35:15.6999917Z",
                                    "lastModifiedBy": "Joe User",
                                    "lastModifiedDateTime": "2021-02-08T18:58:01.3616728Z",
                                    "status": "Draft",
                                    "assignee": {
                                        "displayName": "Joe User",
                                        "id": "9e399e39-0000-1111-2222-8d8a8d8a8d8a"
                                    },
                                    "number": "ISS-00001",
                                    "displayName": "Unspecified material (v1.2)",
                                    "type": "Issue",
                                    "state": "Open",
                                    "properties": {
                                        "Priority": "Medium"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "This response indicates that there is a problem with the format of the request body. Most likely causes: An unrecognized standard or custom property was added, a standard property was set in the 'properties' object instead of the top-level object, the body is invalid JSON, or a property was set to a value of the wrong type.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "InvalidBodySchema",
                                    "message": "One or more properties in the request body are invalid or unrecognized. See 'details' property for specifics.",
                                    "details": [
                                        {
                                            "code": "InvalidProperty",
                                            "message": "This property is not recognized. If it is a custom property, set it in the 'properties' object.",
                                            "target": "badProp"
                                        },
                                        {
                                            "code": "InvalidProperty",
                                            "message": "This property is not a custom property and should be set on the root object directly instead of inside the 'properties' object.",
                                            "target": "description"
                                        },
                                        {
                                            "code": "ReadOnlyProperty",
                                            "message": "This property is read-only and cannot be set by the client.",
                                            "target": "displayName"
                                        },
                                        {
                                            "code": "InvalidValueType",
                                            "message": "The property 'workflowNote' is of an incorrect type. Expected string.",
                                            "target": "workflowNote"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "409": {
                        "description": "This response indicates that the issue the user attempted to update does not exist (or is inaccessible due to insufficient permissions).",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "IssueNotFound",
                                    "message": "The issue with the specified ID was not found, and PATCH does not support Upsert."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            },
            "get": {
                "description": "---\r\n\r\nRetrieves all properties of the specified issue.\r\n\r\nKnown, common properties will be returned directly on the 'issue' object, whereas custom properties unique to the issue's type will be returned on the 'properties' sub-object.\r\n\r\nFor compatibilty with JSON schema specifications, some property types are presented as \"All of: [some object type name]\".  This simply means the value should be a single object of that type.\r\n\r\nNote that many properties in the schema are described as 'Origin info.' This means that they are metadata about where the issue came from and what business domain object(s) it is related to, such as a PDF file or a 3D model. Their meanings can differ from application to application. Many applications will use only a subset of these properties, and in general applications SHOULD NOT use or set these values unless they have a good reason to do so. Other properties, not marked 'Origin info', will commonly be set on most issues, but clients SHOULD NOT assume that all of them are set.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-issue-details",
                "summary": "Get issue details",
                "tags": [
                    "Issues"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue to get details for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Issue Details (get)"
                        },
                        "examples": {
                            "application/json": {
                                "issue": {
                                    "id": "VcVcVcC8sUuVcgeXz1Ih_TFblwnlFIZNpPGwQGwQGwQ",
                                    "boundingBox": {
                                        "lowerLeftPoint3D": {
                                            "x": 1,
                                            "y": 2,
                                            "z": 3
                                        },
                                        "upperRightPoint3D": {
                                            "x": 4,
                                            "y": 5,
                                            "z": 6
                                        }
                                    },
                                    "location": {
                                        "latitude": 30,
                                        "longitude": 60,
                                        "elevation": 1000,
                                        "description": "The center of the construction site"
                                    },
                                    "modelView": {
                                        "cameraView": {
                                            "viewPoint": {
                                                "x": 1,
                                                "y": 0,
                                                "z": 0
                                            },
                                            "direction": {
                                                "x": 2,
                                                "y": 0,
                                                "z": 0
                                            },
                                            "up": {
                                                "x": 1,
                                                "y": 0,
                                                "z": 1
                                            },
                                            "viewToWorldScale": 1,
                                            "fieldOfView": 1
                                        }
                                    },
                                    "createdBy": "Joe User",
                                    "createdDateTime": "2020-10-20T16:08:29.1714953Z",
                                    "lastModifiedBy": "Sue User2",
                                    "lastModifiedDateTime": "2020-10-20T16:18:46.7787266Z",
                                    "status": "Open",
                                    "assignee": {
                                        "displayName": "Sue User2",
                                        "id": "f4fa6f4f-0000-1111-2222-f4fa6f4fa6f4"
                                    },
                                    "number": "PUN-00001",
                                    "displayName": "PUN-00001",
                                    "subject": "Punchlist Sample",
                                    "description": "This should be filled out with a description of the punchlist item.",
                                    "type": "Punchlist",
                                    "dueDate": "2020-10-30T00:00:00Z",
                                    "state": "Open",
                                    "properties": {},
                                    "formId": "VcVcVcC8sUuVcgeXz1Ih_cnRU1gUD8dKqbBHUBHUBHU"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the specified project does not exist, or the user doesn't have permission to view it.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "IssueNotFound",
                                    "message": "The issue with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/{id}/download": {
            "get": {
                "description": "---\r\n\r\nGets the specified issue exported to the specified file format. Currently, the default--and only supported format--is PDF. The issue with the specified ID will be laid out in the PDF according to its associated form definition.\r\n\r\nThe generated PDF will have a header at the top of each page with metadata about the issue (such as its name and creation date) unless the 'includeHeader' query parameter is set to false.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "download-issue-as-file",
                "summary": "Download issue as file",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue to download as a file.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fileType",
                        "in": "query",
                        "description": "The type of file to download the form as. Currently the default, and only supported value, is 'PDF'.",
                        "type": "string",
                        "default": "pdf",
                        "enum": [
                            "pdf"
                        ]
                    },
                    {
                        "name": "includeHeader",
                        "in": "query",
                        "description": "If downloading as PDF, sets whether to include form metadata on the top of each page. Default is true.",
                        "type": "boolean",
                        "default": true,
                        "enum": [
                            true,
                            false
                        ]
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/pdf",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Indicates that the file was successfully generated in the requested format. The response body consists of the generated file."
                    },
                    "400": {
                        "description": "This response indicates that there is a problem with the format of the URL. Most likely problem: The 'fileType' parameter is set to an unsupported file type, or the 'includeHeader' parameter is set to a non-boolean value.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "InvalidParameter",
                                    "message": "If set, the 'includeHeader' parameter's value must be 'true' or 'false'."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the specified issue does not exist or is inaccessible.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "IssueNotFound",
                                    "message": "The issue with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/{id}/comments": {
            "post": {
                "description": "---\r\n\r\nAdds a new comment to the specified issue. Only the comment text is needed; the author and creation time will be automatically set by the server.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:modify*.\r\n\r\n---",
                "operationId": "add-comment-to-issue",
                "summary": "Add comment to issue",
                "tags": [
                    "Comments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue to get",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:modify'",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "comment-create",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Comment-create"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Indicates that the comment was created successfully"
                    },
                    "400": {
                        "description": "This response indicates that there is a problem with the format of the request body. Most likely causes: The body is not valid JSON, or the 'text' property is missing or not a string.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "RequiredPropertyMissing",
                                    "message": "The request body must consist of a single object with 'text' property."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the issue the user attempted to add a comment to does not exist or is inaccessible to the user.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "IssueNotFound",
                                    "message": "The issue with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            },
            "get": {
                "description": "---\r\n\r\nRetrieves the text and metadata for all comments that have been posted to the given issue. If the Prefer header was specified with the value \"return=representation\", the response will include the email address of each comment author, though this may incur additional processing time.  If there is an extraordinarily large number of comments, only 50 distinct user email addresses will be retrieved and shown. Regardless of the Prefer header value, the \"_links\" object associated with each comment will provide a link to additional information about the comment author.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-issue-comments",
                "summary": "Get issue comments",
                "tags": [
                    "Comments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue to get comments for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Prefer",
                        "in": "header",
                        "description": "Sets the level of detail to return. For this endpoint, setting 'return=representation' will add the comment authors' email addresses to the response.",
                        "type": "string",
                        "default": "return=minimal",
                        "enum": [
                            "return=minimal",
                            "return=representation"
                        ]
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json;minimal",
                    "application/json;representation",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Comments List (Prefer return=representation)"
                        },
                        "examples": {
                            "application/json;minimal": {
                                "comments": [
                                    {
                                        "id": "VcVcVcC8sUuVcgeXz1Ih_aqgKUQJ4YZCg5ED6ED6ED6",
                                        "text": "Second comment",
                                        "authorDisplayName": "Joe User",
                                        "createdDateTime": "2020-10-20T16:08:30.2960969Z",
                                        "_links": {
                                            "author": {
                                                "href": "https://api.bentley.com/projects/30273027-1111-2222-3333/members/9e399e39-0000-1111-2222-8d8a8d8a8d8a"
                                            }
                                        }
                                    },
                                    {
                                        "id": "VcVcVcC8sUuVcgeXz1Ih_dQVJUOk7VpMmONsENsENsE",
                                        "text": "First comment",
                                        "authorDisplayName": "Joe User",
                                        "createdDateTime": "2020-10-20T16:08:30.3117243Z",
                                        "_links": {
                                            "author": {
                                                "href": "https://api.bentley.com/projects/30273027-1111-2222-3333/members/9e399e39-0000-1111-2222-8d8a8d8a8d8a"
                                            }
                                        }
                                    }
                                ]
                            },
                            "application/json;representation": {
                                "comments": [
                                    {
                                        "id": "VcVcVcC8sUuVcgeXz1Ih_aqgKUQJ4YZCg5ED6ED6ED6",
                                        "text": "Second comment",
                                        "authorDisplayName": "Joe User",
                                        "authorEmail": "joe.user@example.com",
                                        "createdDateTime": "2020-10-20T16:08:30.2960969Z",
                                        "_links": {
                                            "author": {
                                                "href": "https://api.bentley.com/projects/30273027-1111-2222-3333/members/9e399e39-0000-1111-2222-8d8a8d8a8d8a"
                                            }
                                        }
                                    },
                                    {
                                        "id": "VcVcVcC8sUuVcgeXz1Ih_dQVJUOk7VpMmONsENsENsE",
                                        "text": "First comment",
                                        "authorDisplayName": "Joe User",
                                        "authorEmail": "joe.user@example.com",
                                        "createdDateTime": "2020-10-20T16:08:30.3117243Z",
                                        "_links": {
                                            "author": {
                                                "href": "https://api.bentley.com/projects/30273027-1111-2222-3333/members/9e399e39-0000-1111-2222-8d8a8d8a8d8a"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the specified issue does not exist or is inaccessible to the user.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "IssueNotFound",
                                    "message": "The issue with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/workflows/{type}": {
            "get": {
                "description": "---\r\n\r\nRetrieves the workflow for the given issue type in the given project. The project must be specified using the 'projectId' query string parameter.\r\n\r\nIt is possible for users of a project to choose not to set a workflow for a given type. In that case, requests to get the workflow of that type will return a 404 Not Found response where the 'code' property of the body's 'error' object is set to \"WorkflowNotFound\". This does not indicate client error. Other HTTP status codes, or other values of the 'code' property, do indicate an unexpected error of some sort.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-workflow",
                "summary": "Get workflow",
                "tags": [
                    "Workflow"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The issue type to get workflow for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "The ID of the project or context to get a workflow for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Workflow Response (get)"
                        },
                        "examples": {
                            "application/json": {
                                "workflow": {
                                    "id": "e5Ue5Ue5U02hNz19awLcRh3pqLoNXpZDuR123456789",
                                    "startStates": [
                                        "Open",
                                        "Closed"
                                    ],
                                    "type": "Punchlist",
                                    "states": [
                                        {
                                            "name": "Open",
                                            "color": "#ff0000",
                                            "editableProperties": [],
                                            "stateCategory": "Open"
                                        },
                                        {
                                            "name": "Closed",
                                            "color": "#274e13",
                                            "editableProperties": [],
                                            "stateCategory": "Closed"
                                        }
                                    ],
                                    "transitions": [
                                        {
                                            "displayName": "Close",
                                            "start": "Open",
                                            "end": "Closed",
                                            "notes": "None"
                                        },
                                        {
                                            "displayName": "Reopen",
                                            "start": "Closed",
                                            "end": "Open",
                                            "notes": "None"
                                        }
                                    ],
                                    "startingTransitions": [
                                        {
                                            "displayName": "Create as Open",
                                            "start": null,
                                            "end": "Open",
                                            "notes": "None"
                                        },
                                        {
                                            "displayName": "Create as Closed",
                                            "start": null,
                                            "end": "Closed",
                                            "notes": "None"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A URL parameter was malformed. Either the 'type' parameter is not a valid issue type, or the required 'projectId' query parameter is missing or not a valid GUID.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "InvalidParameter",
                                    "message": "The 'projectId' URL parameter is missing or is not a valid GUID."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the project does not exist (code = 'RepositoryNotFound') or that there is no workflow set for this issue type (code = 'WorkflowNotFound'). This latter case does not indicate client error, as it is valid for a user to choose not to set a workflow for a given issue type.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "WorkflowNotFound",
                                    "message": "No workflow with the given type exists for this project."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/{id}/comments/{commentId}": {
            "delete": {
                "description": "---\r\n\r\nDeletes the specified comment from the specified issue.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:modify*.\r\n\r\n---",
                "operationId": "delete-comment",
                "summary": "Delete comment",
                "tags": [
                    "Comments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue the comment is associated with.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "The ID of the comment to delete.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:modify'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Indicates that the comment was successfully deleted. There is no response body in this case."
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the comment with the specified ID does not exist or is inaccessible to the user.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "CommentNotFound",
                                    "message": "The comment with the given ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/{id}/auditTrailEntries": {
            "get": {
                "description": "---\r\n\r\nRetrieves a reverse-chronologically-ordered list of all changes that have been made to this issue, including authors, dates, and old vs. new property values.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-issue-audit-trail",
                "summary": "Get issue audit trail",
                "tags": [
                    "AuditTrail"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the issue to get audit entries for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Audit Trail"
                        },
                        "examples": {
                            "application/json": {
                                "auditTrailEntries": [
                                    {
                                        "id": "abcdMNUYw02hNz19awLcRglMXtJ6wX1Au90K-x30000",
                                        "changeBy": "Sue User2",
                                        "changeById": "f4fa6f4f-0000-1111-2222-f4fa6f4fa6f4",
                                        "changeDateTime": "2020-11-23T17:51:47.3533335Z",
                                        "action": "Modified",
                                        "changes": [
                                            {
                                                "property": "Severity",
                                                "oldValue": "Medium",
                                                "newValue": "High"
                                            }
                                        ]
                                    },
                                    {
                                        "id": "abcdMNUYw02hNz19awLcRszUhyKBA2hFroBiHF70000",
                                        "changeBy": "Joe User",
                                        "changeById": "9e399e39-0000-1111-2222-8d8a8d8a8d8a",
                                        "changeDateTime": "2020-11-23T17:48:48.9505035Z",
                                        "action": "Opened",
                                        "changes": [
                                            {
                                                "property": "Closed",
                                                "oldValue": null,
                                                "newValue": "False"
                                            }
                                        ]
                                    },
                                    {
                                        "id": "abcdMNUYw02hNz19awLcRvLVYgvQ009DsFLTfxs0000",
                                        "changeBy": "Joe User",
                                        "changeById": "9e399e39-0000-1111-2222-8d8a8d8a8d8a",
                                        "changeDateTime": "2020-11-23T17:48:48.9505035Z",
                                        "action": "Status",
                                        "changes": [
                                            {
                                                "property": "Status",
                                                "oldValue": null,
                                                "newValue": "Open"
                                            }
                                        ]
                                    },
                                    {
                                        "id": "abcdMNUYw02hNz19awLcRlgCKHZ7PHZFnGYz4P_0000",
                                        "changeBy": "Joe User",
                                        "changeById": "9e399e39-0000-1111-2222-8d8a8d8a8d8a",
                                        "changeDateTime": "2020-11-23T17:48:48.8254245Z",
                                        "action": "Assigned",
                                        "changes": [
                                            {
                                                "property": "AssignedTo",
                                                "oldValue": null,
                                                "newValue": "Sue User2"
                                            },
                                            {
                                                "property": "AssignedToId",
                                                "oldValue": null,
                                                "newValue": "f4fa6f4f-0000-1111-2222-f4fa6f4fa6f4"
                                            }
                                        ]
                                    },
                                    {
                                        "id": "abcdMNUYw02hNz19awLcRkCOCh-gk3ZEhnNzf1A0000",
                                        "changeBy": "Joe User",
                                        "changeById": "9e399e39-0000-1111-2222-8d8a8d8a8d8a",
                                        "changeDateTime": "2020-11-23T17:48:48.7941806Z",
                                        "action": "Created",
                                        "changes": []
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the specified issue does not exist or is inaccessible to the user.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "IssueNotFound",
                                    "message": "The issue with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/formDefinitions/{id}/staticImages/{fileId}": {
            "get": {
                "description": "---\r\n\r\nGets a link to a static image to be displayed in a form. The 'fileId' parameter should match the 'fileId' property of a static image control in the form's definition.  It will be a positive integer.  This endpoint returns only a _links object containing the URL of the actual file, which is publicly available and can be set as the 'src' attribute of an HTML <img> tag to display the image.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-static-image",
                "summary": "Get static image",
                "tags": [
                    "FormDefinitions"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the form definition to get a static image for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fileId",
                        "in": "path",
                        "description": "The ID of the static image.  Will be a positive integer, not a GUID.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Static Image Response"
                        },
                        "examples": {
                            "application/json": {
                                "_links": {
                                    "imageUrl": {
                                        "href": "https://some.azure.blob.storage.account.windows.net/some_long_blob_id"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the static image or its associated form definition was not found.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "ImageNotFound",
                                    "message": "The image with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/formDefinitions": {
            "get": {
                "description": "---\r\n\r\nRetrieves a list of Approved form definitions for the project with the given ID.  This only returns the definition's name, type, and ID. The full definitions will be returned in the 'Get form definition by ID' endpoint.\r\n\r\nNote that in order to create an issue, it must be associated with the ID of one of these form definitions (through the 'formId' property in the 'Create issue' request body). If the project does not have any form definitions of the issue type you need, a project administrator should use the Bentley Form Manager (accessible through the Forms or Issues webapp) to create or import one.\r\n\r\nNote that the 'projectId' query string parameter is required. It must be a valid project GUID to get form definitions from.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid OIDC token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-project-form-definitions",
                "summary": "Get project form definitions",
                "tags": [
                    "FormDefinitions"
                ],
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "The GUID of the project to get form definitions for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The issue type to get form definitions for. Omit to get all form definitions, regardless of type.",
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Form Definition List"
                        },
                        "examples": {
                            "application/json": {
                                "formDefinitions": [
                                    {
                                        "id": "e5Ue5Ue5U02hNz19awLcRpwxKq9kmcZEqw123456789",
                                        "displayName": "Clash Review",
                                        "type": "Clash"
                                    },
                                    {
                                        "id": "e5Ue5Ue5U02hNz19awLcRnQIKZ9n-5VNql123456789",
                                        "displayName": "Civil",
                                        "type": "Civil Design"
                                    },
                                    {
                                        "id": "e5Ue5Ue5U02hNz19awLcRvZ97C-0gldCg7123456789",
                                        "displayName": "PWDM RFI",
                                        "type": "RFI"
                                    },
                                    {
                                        "id": "e5Ue5Ue5U02hNz19awLcRk1_FOY1fxhOoL123456789",
                                        "displayName": "Punch List",
                                        "type": "Closeout"
                                    },
                                    {
                                        "id": "e5Ue5Ue5U02hNz19awLcRmFoakRibdVAsq123456789",
                                        "displayName": "Punchlist",
                                        "type": "Punchlist"
                                    },
                                    {
                                        "id": "e5Ue5Ue5U02hNz19awLcRtnnI7NMyWVCqt123456789",
                                        "displayName": "Issue",
                                        "type": "Field Data"
                                    },
                                    {
                                        "id": "e5Ue5Ue5U02hNz19awLcRs_krW5iPFdMhX123456789",
                                        "displayName": "Design Issue",
                                        "type": "Issue"
                                    },
                                    {
                                        "id": "e5Ue5Ue5U02hNz19awLcRtfgSsUdmQxLkB123456789",
                                        "displayName": "Design Task",
                                        "type": "Task"
                                    },
                                    {
                                        "id": "e5Ue5Ue5U02hNz19awLcRqs7_5zpRFVJpy123456789",
                                        "displayName": "Design Review",
                                        "type": "Communication"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the project with the specified ID does not exist or is inaccessible to the user due to insufficient permissions. (For security reasons, the response will not differ between inaccessible and missing projects.)",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "ProjectNotFound",
                                    "message": "The specified project does not exist, or you do not have permission to view it."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/formDefinitions/{id}/listGroups/{listGroupId}": {
            "get": {
                "description": "---\r\n\r\nUse this request to look up a list group, which is a nested object structure that defines the options available in a chain of cascading list form controls. (Cascading lists are a set of &lt;select&gt; elements where only the first one is initially enabled until an option in it is selected, and then, depending on which option was selected, the available options in the next list can vary.) Each property in the structure represents an option in a select list, and its children represent options that become available in the next list in the chain if that option is selected.\r\n\r\n### Sample Explanation\r\n\r\nThe sample for the 200 response shows an example of a list group that could be assigned to 3 controls in a form to let the user pick an American football team by conference, division, and name. Since the result has two properties (\"AFC\" and \"NFC\") as direct children of the \"optionsTree\" property, the first list in the cascading list chain would have two options--\"AFC\" and \"NFC\".  Whichever option is chosen, its child properties become available for selection in the second list, and so forth.  For example, if \"AFC\" and \"North\" were chosen for the first two lists respectively, the third list would show the available options \"Bengals\", \"Browns\", \"Ravens\", and \"Steelers\".  These four properties just have empty objects as their values because this particular list group only has three layers; these options are the final options in the chain and have no descendants.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "get-list-group",
                "summary": "Get list group",
                "tags": [
                    "FormDefinitions"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the form definition this list group is used in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "listGroupId",
                        "in": "path",
                        "description": "The ID of the list group to get.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/List Group Response"
                        },
                        "examples": {
                            "application/json": {
                                "listGroup": {
                                    "id": "1d49859f-0757-423a-b850-9b6ae0a088c6",
                                    "lists": [
                                        "Conference",
                                        "Division",
                                        "Team"
                                    ],
                                    "optionsTree": {
                                        "AFC": {
                                            "North": {
                                                "Steelers": {},
                                                "Browns": {},
                                                "Bengals": {},
                                                "Ravens": {}
                                            },
                                            "East": {
                                                "Patriots": {},
                                                "Bills": {},
                                                "Dolphins": {},
                                                "Jets": {}
                                            },
                                            "South": {
                                                "Titans": {},
                                                "Jaguars": {},
                                                "Texans": {},
                                                "Colts": {}
                                            },
                                            "West": {
                                                "Chiefs": {},
                                                "Broncos": {},
                                                "Raiders": {},
                                                "Chargers": {}
                                            }
                                        },
                                        "NFC": {
                                            "North": {
                                                "Vikings": {},
                                                "Packers": {},
                                                "Bears": {},
                                                "Lions": {}
                                            },
                                            "East": {
                                                "Eagles": {},
                                                "Giants": {},
                                                "Cowboys": {},
                                                "Washington": {}
                                            },
                                            "South": {
                                                "Saints": {},
                                                "Buccaneers": {},
                                                "Panthers": {},
                                                "Falcons": {}
                                            },
                                            "West": {
                                                "49ers": {},
                                                "Seahawks": {},
                                                "Rams": {},
                                                "Cardinals": {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "This response indicates that the list group or its associated form definition was not found.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "ListGroupNotFound",
                                    "message": "The list group with the specified ID was not found."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        },
        "/storageExport": {
            "get": {
                "description": "---\r\n\r\nRequests that anywhere from 1 to 5 issues be exported to a file and saved in cloud-based project storage (accessible through the Storage API). Currently 'pdf' is the only supported file type. The IDs of the issues must be specified in a query string parameter named \"ids\", separated by commas if there is more than one. A sample request URL that exports 3 issues to a PDF is as follows--\r\n\r\nhttps://api.bentley.com/issues/exportPdfToStorage?ids=abab23524535,89458jjlij,32636wtewtwt&folderId=090909877987&includeHeader=true\r\n\r\nNote that unlike most GET requests, this is not an idempotent operation; each time it is called, a new file will be generated. The response will not contain the file itself, but links to download it from Storage.\r\n\r\nAll issues specified in the request must come from the same project, or the request will fail. The client may also specify the ID of a destination folder where the file should be saved; otherwise, it will be saved in the project's root folder.  They can also specify whether to include a textual header with issue metadata at the top of each page (default) or exclude it.\r\n\r\n### Authentication\r\n\r\nRequires *Authorization* header with valid Bearer token for scope *issues:read*.\r\n\r\n---",
                "operationId": "export-issues-to-storage",
                "summary": "Export issues to Storage",
                "parameters": [
                    {
                        "name": "ids ",
                        "in": "query",
                        "description": "Instance IDs of issues to export. Must include at least 1, but no more than 5, IDs, separated by commas, and they all must come from the same project.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeHeader",
                        "in": "query",
                        "description": "If exporting to PDF, indicates whether to include metadata on top of each page.  Default is true.",
                        "type": "boolean",
                        "default": true,
                        "enum": [
                            true,
                            false
                        ]
                    },
                    {
                        "name": "fileType",
                        "in": "query",
                        "description": "Indicates the type of file to create. Right now PDF is the only valid option, and is the default if not specified.",
                        "type": "string",
                        "default": "pdf",
                        "enum": [
                            "pdf"
                        ]
                    },
                    {
                        "name": "folderId",
                        "in": "query",
                        "description": "The ID, as retrieved from the Storage API, of the folder where the produced file should be saved. If not set, will default to the project's root folder.",
                        "type": "string"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "OAuth access token with scope 'issues:read'",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Indicates that the file was generated successfully. The response includes the generated file's filename as well as links for using the Storage API to retrieve it.",
                        "schema": {
                            "$ref": "#/definitions/Export File to Share (response)"
                        },
                        "examples": {
                            "application/json": {
                                "file": {
                                    "fileName": "Generated_20220313_1234554321",
                                    "_links": {
                                        "destinationFolder": {
                                            "href": "https://api.bentley.com/storage/folders/ab12cd34ef56gh78"
                                        },
                                        "fileMetadata": {
                                            "href": "https://api.bentley.com/storage/files/zy09xw87vu65ts43"
                                        },
                                        "fileDownload": {
                                            "href": "https://api.bentley.com/storage/files/zy09xw87vu65ts43/download"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "This response indicates that there is a problem with the request parameters. Depending on the problem, the 'details' array may include specific errors.",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "InvalidQueryString",
                                    "message": "One or more parameters in the query string are invalid. See 'details' property for specifics.",
                                    "details": [
                                        {
                                            "code": "InvalidValueType",
                                            "message": "The 'includeHeader' property is of an incorrect type. Expected boolean.",
                                            "target": "includeHeader"
                                        },
                                        {
                                            "code": "InvalidId",
                                            "message": "The IDs 'a' and 'b' come from different projects. All items included together in a PDF must come from the same project.",
                                            "target": "ids"
                                        },
                                        {
                                            "code": "InvalidId",
                                            "message": "The 'folderId' parameter is not a valid ID.",
                                            "target": "folderId"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "This response indicates that request lacks valid authentication credentials. Access token might not been provided, issued by the wrong issuer, does not have required scopes or request headers were malformed.",
                        "examples": {
                            "application/json": {
                                "statusCode": 401,
                                "message": "Unauthorized. Access token is missing or invalid."
                            }
                        }
                    },
                    "403": {
                        "description": "This response indicates that user does not have required permissions to access the resouce."
                    },
                    "404": {
                        "description": "Either one of the issues specified does not exist (code = 'IssueNotFound') or the destination folder does not exist (code = 'FolderNotFound').",
                        "schema": {
                            "$ref": "#/definitions/Error Response"
                        },
                        "examples": {
                            "application/json": {
                                "error": {
                                    "code": "FolderNotFound",
                                    "message": "The specified destination folder was not found in the project's Storage."
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "This response indicates that the user has sent too many requests in a given amount of time."
                    }
                }
            }
        }
    },
    "definitions": {
        "Comments List (Prefer return=minimal)": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment (get, Prefer return=minimal)"
                    }
                }
            }
        },
        "Comment (get, Prefer return=minimal)": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "String that uniquely identifies this comment.",
                    "type": "string"
                },
                "text": {
                    "description": "The contents of the comment.",
                    "type": "string"
                },
                "author": {
                    "description": "Display name (i.e., given name and surname) of the user who posted this comment. (If the comment was posted using this API, it is inferred to be the authorized user making the request.)",
                    "type": "string"
                },
                "createdDateTime": {
                    "format": "date-time",
                    "description": "Date and time the comment was posted.",
                    "type": "string"
                },
                "workflowNoteFrom": {
                    "description": "Will only be set if the comment is a workflow transition note. This is the name of the status the issue was in before the transition.",
                    "type": "string"
                },
                "workflowNoteTo": {
                    "description": "Will only be set if the comment is a workflow transition note. This is the name of the status the issue is in after the transition.",
                    "type": "string"
                },
                "_links": {
                    "type": "object",
                    "properties": {
                        "author": {
                            "type": "object",
                            "properties": {
                                "_href": {
                                    "description": "A URL that can be used to retrieve more information about the comment author.",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "Comments List (Prefer return=representation)": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment (get, Prefer return=representation)"
                    }
                }
            }
        },
        "Comment (get, Prefer return=representation)": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "String that uniquely identifies this comment.",
                    "type": "string"
                },
                "text": {
                    "description": "The contents of the comment.",
                    "type": "string"
                },
                "author": {
                    "description": "Display name (i.e., given name and surname) of the user who posted this comment. (If the comment was posted using this API, it is inferred to be the authorized user making the request.)",
                    "type": "string"
                },
                "authorEmail": {
                    "description": "Email address of the user who wrote this comment.",
                    "type": "string"
                },
                "createdDateTime": {
                    "format": "date-time",
                    "description": "Date and time the comment was posted.",
                    "type": "string"
                },
                "workflowNoteFrom": {
                    "description": "Will only be set if the comment is a workflow transition note. This is the name of the status the issue was in before the transition.",
                    "type": "string"
                },
                "workflowNoteTo": {
                    "description": "Will only be set if the comment is a workflow transition note. This is the name of the status the issue is in after the transition.",
                    "type": "string"
                },
                "_links": {
                    "type": "object",
                    "properties": {
                        "author": {
                            "type": "object",
                            "properties": {
                                "_href": {
                                    "description": "A URL that can be used to retrieve more information about the comment author.",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "Comment-create": {
            "type": "object",
            "properties": {
                "text": {
                    "description": "The text of the comment.",
                    "type": "string"
                }
            },
            "example": {
                "text": "Here's something noteworthy about this issue."
            }
        },
        "Attachment Metadata List": {
            "type": "object",
            "properties": {
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Attachment Metadata (get)"
                    }
                }
            }
        },
        "Attachment Metadata (get)": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Read-only. String that uniquely identifies this attachment and can be used in the `Get attachment file by ID` request to download the file.",
                    "type": "string"
                },
                "fileName": {
                    "description": "The name of the file that was uploaded.",
                    "type": "string"
                },
                "type": {
                    "description": "Read-only. File extension of the uploaded file. Derived from fileName.",
                    "type": "string"
                },
                "caption": {
                    "description": "Descriptive string provided by a user for this attachment, if any.",
                    "type": "string"
                },
                "createdDateTime": {
                    "format": "date-time",
                    "description": "Date and time the attachment was uploaded. Read-only; auto-set when attachment is created.",
                    "type": "string"
                },
                "size": {
                    "description": "Size of the file in bytes. Read-only; auto-set when attachment is created.",
                    "type": "integer"
                },
                "binding": {
                    "description": "If the attachment was uploaded from an Image Drop control, this is the property name the control is bound to. Otherwise, null.",
                    "type": "string"
                }
            }
        },
        "Attachment Metadata-create": {
            "type": "object",
            "properties": {
                "fileName": {
                    "description": "The file's filename. This will determine the MIME type of the file when requested.",
                    "type": "string"
                },
                "caption": {
                    "description": "A string describing the significance of this attachment.",
                    "type": "string"
                },
                "binding": {
                    "description": "If this attachment is being created from an Image Drop control, this associates the attachment with that control.",
                    "type": "string"
                }
            },
            "example": {
                "fileName": "CrackedConcrete.png",
                "caption": "Picture of the cracked concrete",
                "binding": "TypeOfDefect"
            }
        },
        "Audit Trail": {
            "type": "object",
            "properties": {
                "auditTrailEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Audit Trail Entry (get)"
                    }
                }
            }
        },
        "Audit Trail Entry (get)": {
            "description": "Information about a single occurrence of a change to this issue.",
            "type": "object",
            "properties": {
                "id": {
                    "description": "String that uniquely identifies this entry.",
                    "type": "string"
                },
                "changeBy": {
                    "description": "The display name (i.e., given name and surname) of the user who made this change.",
                    "type": "string"
                },
                "changeById": {
                    "description": "The GUID of the user who made this change.",
                    "type": "string"
                },
                "changeDateTime": {
                    "format": "date-time",
                    "description": "The date and time of this change.",
                    "type": "string"
                },
                "action": {
                    "description": "The type of change that was made to the issue.  Possible values: 'Created', 'Modified', 'Assigned', 'Status', 'Closed', 'Opened', 'Draft', 'Deleted', 'Undeleted', 'File Attached', 'File Removed', 'Form Raised'",
                    "enum": [
                        "Created",
                        "Modified",
                        "Assigned",
                        "Status",
                        "Closed",
                        "Opened",
                        "Draft",
                        "Deleted",
                        "Undeleted",
                        "File Attached",
                        "File Removed",
                        "Form Raised"
                    ],
                    "type": "string"
                },
                "changes": {
                    "description": "The individual property modifications that were made in this changeset.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "property": {
                                "description": "The name of the changed property.",
                                "type": "string"
                            },
                            "oldValue": {
                                "description": "A string representation of the changed property's previous value, if any.",
                                "type": "string"
                            },
                            "newValue": {
                                "description": "A string representation of the changed property's new value, if any.",
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "Form Definition List": {
            "type": "object",
            "properties": {
                "formDefinitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Form Definition Summary"
                    }
                }
            }
        },
        "Form Definition Summary": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique ID for this form definition.",
                    "type": "string"
                },
                "displayName": {
                    "description": "The name of this form definition as it is displayed to users in the Form Manager UI and Issues webapp UI.",
                    "type": "string"
                },
                "type": {
                    "description": "The issue type that can be created from this form definition.",
                    "type": "string"
                }
            }
        },
        "Workflow Response (get)": {
            "type": "object",
            "properties": {
                "workflow": {
                    "$ref": "#/definitions/Workflow-get"
                }
            }
        },
        "Workflow-get": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier for this workflow.",
                    "type": "string"
                },
                "startStates": {
                    "description": "The names of all the states that can be chosen for a newly-created issue's `status` property.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "The issue type this workflow applies to.",
                    "type": "string"
                },
                "states": {
                    "description": "A list of possible workflow states, i.e. possible values of the `status` issue property.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Workflow State"
                    }
                },
                "transitions": {
                    "description": "A list of valid workflow transitions. The `status` property of an issue can only be changed if there is a transition, accessible to the current user, whose `start` property matches the current value of the `status` property of the issue, and whose `end` property matches the new `status` value.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Workflow Transition"
                    }
                },
                "startingTransitions": {
                    "description": "Transitions that govern setting the `status` property of a brand-new issue. These will each have a null value for `start` and a starting state name for `end`. Clients should not depend on this array existing or including a transition for every start state, but should still allow the user to select any start state when creating a new issue.",
                    "type": "array"
                },
                "uninitializedState": {
                    "description": "Workflow state representing the status of a new issue, before it has been saved. This mainly just determines (through the `editableProperties` array) which properties can be set on the issue's initial save. Even though this state's `name` property may be null, the issue's `status` property will have to be set to a valid, non-null value that matches one of the start state names.",
                    "type": "object"
                }
            }
        },
        "Workflow State": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of this state. This is used both for display purposes and to uniquely identify this state within the workflow. If an issue has a workflow, its `status` property must match a state's `name` property.",
                    "type": "string"
                },
                "color": {
                    "description": "A hexadecimal RGB color string, e.g. '#ff0000'. This provides a hint to clients on how to highlight issues based on their current `status` property. Not all clients use, or are required to use, this property, and it may be null.",
                    "type": "string"
                },
                "editableProperties": {
                    "description": "The names of properties that can be edited while the workflow is in this state.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "stateCategory": {
                    "description": "Classifies this state as a 'Closed', 'Open', or 'Draft' state. While the issue is in this state, its `state` property will automatically be set to this string.",
                    "enum": [
                        "Closed",
                        "Open",
                        "Draft"
                    ],
                    "type": "string"
                }
            }
        },
        "Workflow Transition": {
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "The name of this transition, i.e. the text that should appear on the UI element that triggers this transition.",
                    "type": "string"
                },
                "start": {
                    "description": "The name of the workflow state where this transition begins.",
                    "type": "string"
                },
                "end": {
                    "description": "The name of the workflow state where this transition ends.",
                    "type": "string"
                },
                "notes": {
                    "description": "Denotes whether the transition allows or requires a workflow note to be set when it is triggered (`workflowNote` property on `Issue Update` object). Possible values: 'None', 'Optional', 'Required'.",
                    "enum": [
                        "None",
                        "Optional",
                        "Required"
                    ],
                    "type": "string"
                }
            }
        },
        "Form Definition Details Response": {
            "type": "object",
            "properties": {
                "formDefinition": {
                    "$ref": "#/definitions/Form Definition Details"
                }
            }
        },
        "Form Definition Details": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier for this form definition. Can be set as the formId property in the 'Create issue' request body.",
                    "type": "string"
                },
                "displayName": {
                    "description": "The name of this form definition as it should be displayed to users if they are choosing which form definition to use for a new issue.",
                    "type": "string"
                },
                "type": {
                    "description": "Determines which issue type will be created when this form definition is used.",
                    "type": "string"
                },
                "definition": {
                    "description": "A JSON string defining this form's layout, including all of its controls and their bindings, locations, and styles.",
                    "type": "string"
                },
                "status": {
                    "description": "The form definition's availability. This can be set by a project administrator. Only forms set to Approved can be used to create issues. Possible values: 'Draft', 'Approved', 'Archived'.",
                    "enum": [
                        "Draft",
                        "Approved",
                        "Archived"
                    ],
                    "type": "string"
                },
                "errorStatus": {
                    "description": "String describing whether the form definition has problems that could prevent it from displaying (Warning) or functioning (Error or Critical) correctly. Possible values: 'None', 'Warning', 'Error', 'Critical', 'Unknown'.",
                    "enum": [
                        "None",
                        "Warning",
                        "Error",
                        "Critical",
                        "Unknown"
                    ],
                    "type": "string"
                }
            }
        },
        "Static Image Response": {
            "type": "object",
            "properties": {
                "_links": {
                    "$ref": "#/definitions/Static Image Link"
                }
            }
        },
        "List Group Response": {
            "type": "object",
            "properties": {
                "listGroup": {
                    "$ref": "#/definitions/List Group"
                }
            }
        },
        "List Group": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique ID of this list group. Will be the same as the list group ID in the URL.",
                    "type": "string"
                },
                "lists": {
                    "description": "The names of the lists defined by this list group, from outermost (first) to innermost (last).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "optionsTree": {
                    "description": "A recursive data structure defining the options available in these lists. Its properties can have any name. For each property in the outermost object, its key should be used as the name of an option in the first list, and its value is an object whose keys correspond to the options that become available in the second list when that particular first-list option is chosen, and so forth. This pattern continues down to the last list, whose options will be represented by properties with empty object values.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dynamic Object"
                        }
                    ]
                }
            }
        },
        "Issues List": {
            "type": "object",
            "properties": {
                "issues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Issue Summary"
                    }
                },
                "_links": {
                    "$ref": "#/definitions/Forward Only Paging Links"
                }
            }
        },
        "Issue Summary": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The issue's unique ID. Can be used to query for issue details with the Get Issue Details endpoint.",
                    "type": "string"
                },
                "displayName": {
                    "description": "Name that should be used to display this issue to users.",
                    "type": "string"
                },
                "type": {
                    "description": "Describes which domain of work the issue involves, which determines what applications will show it. Only certain values are supported. Possible values: 'Civil Design', 'Clash', 'Closeout', 'Communication', 'Deficiency', 'Design', 'Field Data', 'Issue', 'Observation', 'Other', 'Punchlist', 'Risk', 'RFI', 'Submittal Issue', 'Task', 'Transmittal Issue'",
                    "enum": [
                        "Civil Design",
                        "Clash",
                        "Closeout",
                        "Communication",
                        "Deficiency",
                        "Design",
                        "Field Data",
                        "Issue",
                        "Observation",
                        "Other",
                        "Punchlist",
                        "Risk",
                        "RFI",
                        "Submittal Issue",
                        "Task",
                        "Transmittal Issue"
                    ],
                    "type": "string"
                },
                "state": {
                    "description": "Indicates whether the issue's current workflow status is an Open, Closed, or Draft status.",
                    "enum": [
                        "Closed",
                        "Open",
                        "Draft"
                    ],
                    "type": "string"
                }
            }
        },
        "Issue Details (get)": {
            "type": "object",
            "properties": {
                "issue": {
                    "$ref": "#/definitions/Issue (get)"
                }
            }
        },
        "Issue (get)": {
            "description": "Contains the full data of this issue. Any property that was never set on the issue will be omitted from the response.",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier for this instance. Read-only.",
                    "type": "string"
                },
                "displayName": {
                    "description": "Name that should be used to show this issue in a list of issues in the UI. This is read-only. Project managers can configure how this is generated; usually, it will be the value of another property.",
                    "type": "string"
                },
                "formId": {
                    "description": "The ID of the form definition that this issue was created with. Note: This property will only be returned during the 'Get issue details' query, not in the result of a Create or Modify operation.",
                    "type": "string"
                },
                "subject": {
                    "description": "Brief title/description of the issue.",
                    "type": "string"
                },
                "description": {
                    "description": "Detailed description of the issue.",
                    "type": "string"
                },
                "type": {
                    "description": "Describes which domain of work the issue involves, which determines what applications will show it. Only certain values are supported. Possible values: 'Civil Design', 'Clash', 'Closeout', 'Communication', 'Deficiency', 'Design', 'Field Data', 'Issue', 'Observation', 'Other', 'Punchlist', 'Risk', 'RFI', 'Submittal Issue', 'Task', 'Transmittal Issue'",
                    "enum": [
                        "Civil Design",
                        "Clash",
                        "Closeout",
                        "Communication",
                        "Deficiency",
                        "Design",
                        "Field Data",
                        "Issue",
                        "Observation",
                        "Other",
                        "Punchlist",
                        "Risk",
                        "RFI",
                        "Submittal Issue",
                        "Task",
                        "Transmittal Issue"
                    ],
                    "type": "string"
                },
                "number": {
                    "description": "An human-readable identifier for the issue, consisting of an alphanumeric prefix (that can be configured by the project administrator) followed by an auto-incrementing number. Read-only.",
                    "type": "string"
                },
                "dueDate": {
                    "description": "The date by which an action should be taken on this issue. Applications will use this to determine whether an issue is near due or overdue.",
                    "type": "string"
                },
                "status": {
                    "description": "The current workflow status the issue is in right now.",
                    "type": "string"
                },
                "state": {
                    "description": "Indicates whether the issue's status is an Open, Closed, or Draft status. This property is read-only.",
                    "type": "string"
                },
                "assignee": {
                    "description": "The primary user or role assigned to this issue.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/primaryAssignee"
                        }
                    ]
                },
                "assignees": {
                    "description": "For cases when an issue is assigned to multiple people and/or roles, this lists all of them rather than just the primary assignee.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/secondaryAssignee"
                    }
                },
                "createdBy": {
                    "description": "The display name of the user who originally created this issue. Read-only.",
                    "type": "string"
                },
                "createdDateTime": {
                    "description": "The date and time when this issue was originally created. Read-only.",
                    "type": "string"
                },
                "lastModifiedBy": {
                    "description": "The display name of the user who most recently made a change to this issue. Read-only.",
                    "type": "string"
                },
                "lastModifiedDateTime": {
                    "description": "The date and time when this issue was most recently edited. Read-only.",
                    "type": "string"
                },
                "item": {
                    "description": "Origin info. Describes an object, like a model element or a file, that an issue pertains to.",
                    "type": "object",
                    "allOf": [
                        {
                            "$ref": "#/definitions/issueLinkedItem"
                        }
                    ]
                },
                "container": {
                    "description": "Origin info. Describes an object that contains the item, if applicable (like a folder that contains the file, or a model that contains the element).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/issueLinkedItem"
                        }
                    ]
                },
                "elementId": {
                    "description": "Origin info. In cases where an issue is associated with two items, provides a way to identify the second item.",
                    "type": "string"
                },
                "boundingBox": {
                    "$ref": "#/definitions/boundingBox"
                },
                "modelPin": {
                    "$ref": "#/definitions/modelPin"
                },
                "modelView": {
                    "$ref": "#/definitions/modelView"
                },
                "modelEventDateTime": {
                    "format": "date-time",
                    "description": "The date and time represented in the model where the issue occurred (if in a 4D model).",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/location"
                },
                "properties": {
                    "description": "Contains all issue-type-specific and user-defined properties that were set on this issue.  Properties set here may be strings, numbers, booleans, arrays, or objects, depending on how the project's administrator defined them in the Form Designer.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dynamic Object"
                        }
                    ]
                }
            }
        },
        "Issue (update)": {
            "description": "Provides new property values for properties that are being changed in the update. All properties are optional. Omitting a property will keep its current value intact.",
            "type": "object",
            "properties": {
                "subject": {
                    "description": "Brief title/description of the issue.",
                    "type": "string"
                },
                "description": {
                    "description": "Detailed description of the issue.",
                    "type": "string"
                },
                "dueDate": {
                    "description": "The date by which an action should be taken on this issue. Applications will use this to determine whether an issue is near due or overdue.",
                    "type": "string"
                },
                "status": {
                    "description": "The issue's new workflow status, if applicable.",
                    "type": "string"
                },
                "workflowNote": {
                    "description": "Text of a comment to associated with the status change. This property MUST NOT be set UNLESS the 'status' property is also set AND the workflow for the issue's type allows a workflow note to be added for transitions from the old status to the new status.",
                    "type": "string"
                },
                "assignee": {
                    "description": "The primary user or role assigned to this issue.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/primaryAssignee"
                        }
                    ]
                },
                "assignees": {
                    "description": "For cases when an issue is assigned to multiple people and/or roles, this lists all of them rather than just the primary assignee.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/secondaryAssignee"
                    }
                },
                "item": {
                    "description": "Origin info. Describes an object, like a model element or a file, that an issue pertains to.",
                    "type": "object",
                    "allOf": [
                        {
                            "$ref": "#/definitions/issueLinkedItem"
                        }
                    ]
                },
                "container": {
                    "description": "Origin info. Describes an object that contains the item, if applicable (like a folder that contains the file, or a model that contains the element).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/issueLinkedItem"
                        }
                    ]
                },
                "elementId": {
                    "description": "Origin info. In cases where an issue is associated with two items, provides a way to identify the second item.",
                    "type": "string"
                },
                "boundingBox": {
                    "$ref": "#/definitions/boundingBox"
                },
                "modelPin": {
                    "$ref": "#/definitions/modelPin"
                },
                "modelView": {
                    "$ref": "#/definitions/modelView"
                },
                "modelEventDateTime": {
                    "format": "date-time",
                    "description": "The date and time represented in the model where the issue occurred (if in a 4D model).",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/location"
                },
                "properties": {
                    "description": "Any custom properties that are defined in the Form Designer for issues of this issue's type may be set here. If this object is omitted or set to null, all custom properties will retain their current values.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dynamic Object"
                        }
                    ]
                }
            },
            "example": {
                "subject": "Unspecified material (v1.2)",
                "description": "The plans do not specify what material this support beam is made of. Updated bounding box for v1.2 of the blueprint.",
                "boundingBox": {
                    "lowerLeftPoint3D": {
                        "x": 1,
                        "y": 2,
                        "z": 3
                    },
                    "upperRightPoint3D": {
                        "x": 4,
                        "y": 5,
                        "z": 6
                    }
                }
            }
        },
        "Issue-create": {
            "description": "Sets property values for an issue being newly created.",
            "type": "object",
            "properties": {
                "formId": {
                    "description": "The ID of the form definition (obtained from the Get project form definitions query) to associate this issue with. The chosen form definition will be used to display the issue in the Issues webapp and other Bentley applications. If no form definition exists in the current project for the issue type you wish to create, please have a project administrator create or import such a form definition using Bentley's Form Designer.",
                    "type": "string"
                },
                "subject": {
                    "description": "Brief title/description of the issue.",
                    "type": "string"
                },
                "description": {
                    "description": "Detailed description of the issue.",
                    "type": "string"
                },
                "dueDate": {
                    "description": "The date by which an action should be taken on this issue. Applications will use this to determine whether an issue is near due or overdue.",
                    "type": "string"
                },
                "status": {
                    "description": "The issue's new workflow status, if applicable.",
                    "type": "string"
                },
                "assignee": {
                    "description": "The primary user or role assigned to this issue. Defaults to current user if not specified.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/primaryAssignee"
                        }
                    ]
                },
                "assignees": {
                    "description": "For cases when an issue is assigned to multiple people and/or roles, this lists all of them rather than just the primary assignee.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/secondaryAssignee"
                    }
                },
                "item": {
                    "description": "Origin info. Describes an object, like a model element or a file, that an issue pertains to.",
                    "type": "object",
                    "allOf": [
                        {
                            "$ref": "#/definitions/issueLinkedItem"
                        }
                    ]
                },
                "container": {
                    "description": "Origin info. Describes an object that contains the item, if applicable (like a folder that contains the file, or a model that contains the element).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/issueLinkedItem"
                        }
                    ]
                },
                "elementId": {
                    "description": "Origin info. In cases where an issue is associated with two items, provides a way to identify the second item.",
                    "type": "string"
                },
                "boundingBox": {
                    "$ref": "#/definitions/boundingBox"
                },
                "modelPin": {
                    "$ref": "#/definitions/modelPin"
                },
                "modelView": {
                    "$ref": "#/definitions/modelView"
                },
                "modelEventDateTime": {
                    "format": "date-time",
                    "description": "The date and time represented in the model where the issue occurred (if in a 4D model).",
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/location"
                },
                "properties": {
                    "description": "Any custom properties that are defined in the Form Designer for issues of this issue's type may be set here.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dynamic Object"
                        }
                    ]
                }
            },
            "example": {
                "subject": "Unspecified material",
                "description": "The plans do not specify what material this support beam will be made out of.",
                "formId": "ZaZaZaYbYav2qwer_-wqer-___wqerqwetaqtewq123",
                "boundingBox": {
                    "lowerLeftPoint3D": {
                        "x": 1,
                        "y": 2,
                        "z": 3
                    },
                    "upperRightPoint3D": {
                        "x": 4,
                        "y": 5,
                        "z": 6
                    }
                }
            }
        },
        "primaryAssignee": {
            "description": "An object describing the primary user or role assigned to an issue.",
            "type": "object",
            "properties": {
                "id": {
                    "description": "The GUID identifying the user or role.",
                    "type": "string"
                },
                "displayName": {
                    "description": "The role's name, or the user's given name and surname, as it should be displayed in an application.",
                    "type": "string"
                }
            }
        },
        "secondaryAssignee": {
            "description": "An object describing one of potentially several users or roles assigned to an issue.",
            "type": "object",
            "properties": {
                "id": {
                    "description": "The GUID identifying the user or role.",
                    "type": "string"
                },
                "displayName": {
                    "description": "The role's name, or the user's given name and surname, as it should be displayed in an application.",
                    "type": "string"
                },
                "isRole": {
                    "description": "If true, this is a role; otherwise, it is an individual user.",
                    "type": "boolean"
                }
            }
        },
        "issueLinkedItem": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The string uniquely identifying this linked item in the system that manages it.",
                    "type": "string"
                },
                "url": {
                    "description": "A link that would allow the user to view the linked item, or details about it, if followed.",
                    "type": "string"
                },
                "displayName": {
                    "description": "Text that should be displayed on the link to this item, if it is shown in a UI.",
                    "type": "string"
                }
            }
        },
        "boundingBox": {
            "description": "Origin info. Describes a rectangular-prism-shaped region in a 3D model that the issue pertains to.",
            "type": "object",
            "properties": {
                "lowerLeftPoint3D": {
                    "description": "The lower-left corner of the region.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/point3D"
                        }
                    ]
                },
                "upperRightPoint3D": {
                    "description": "The upper-right corner of the region.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/point3D"
                        }
                    ]
                }
            }
        },
        "modelPin": {
            "description": "Origin info. Associates an issue with a single point in a model that does not necessarily correspond to a model element.",
            "type": "object",
            "properties": {
                "location": {
                    "description": "The location of the pin.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/point3D"
                        }
                    ]
                },
                "description": {
                    "description": "String describing the relevance of the pin's location.",
                    "type": "string"
                }
            }
        },
        "modelView": {
            "description": "Origin info. Describes the view that was visible when the issue was created.",
            "type": "object",
            "properties": {
                "cameraView": {
                    "description": "An object describing the view that can be parsed by non-IModelJS applications.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/camera"
                        }
                    ]
                },
                "iModelJsView": {
                    "description": "A string defining the view according to IModelJS standards.",
                    "type": "string"
                }
            }
        },
        "point3D": {
            "type": "object",
            "properties": {
                "x": {
                    "format": "double",
                    "type": "number"
                },
                "y": {
                    "format": "double",
                    "type": "number"
                },
                "z": {
                    "format": "double",
                    "type": "number"
                }
            }
        },
        "camera": {
            "type": "object",
            "properties": {
                "viewPoint": {
                    "description": "The location of the camera within the model.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/point3D"
                        }
                    ]
                },
                "direction": {
                    "description": "Endpoint of a vector from the origin that determines the camera's facing direction.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/point3D"
                        }
                    ]
                },
                "up": {
                    "description": "Endpoint of a vector from the origin that determines which direction appears as upwards in the view.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/point3D"
                        }
                    ]
                },
                "viewToWorldScale": {
                    "format": "double",
                    "description": "Determines the zoom level of the camera, i.e. how much to multiply 1 distance unit in the view by to get the actual distance in meters in the model. Either this or fieldOfView should be specified, but not both.",
                    "type": "number"
                },
                "fieldOfView": {
                    "format": "double",
                    "description": "Determines the number of degrees in the circular arc around the camera's position that is visible in the view. Either this or viewToWorldScale should be specified, but not both.",
                    "type": "number"
                }
            }
        },
        "location": {
            "description": "Origin info. The geographical location the issue pertains to.",
            "type": "object",
            "properties": {
                "latitude": {
                    "format": "double",
                    "description": "The degrees latitude of the issue's location. North: positive, south: negative.",
                    "type": "number"
                },
                "longitude": {
                    "format": "double",
                    "description": "The degrees longitude of the issues location. East: positive, west: negative.",
                    "type": "number"
                },
                "elevation": {
                    "format": "double",
                    "description": "The geographical elevation above/below sea level. Units for this property are not standardized, so an application should not make assumptions about this property's value set by other applications unless that other application's units are known.",
                    "type": "number"
                },
                "description": {
                    "description": "A string describing the significance of this location.",
                    "type": "string"
                }
            }
        },
        "Dynamic Object": {
            "description": "An object whose properties can vary depending on user customization within the project.",
            "type": "object"
        },
        "Export File to Share (response)": {
            "type": "object",
            "properties": {
                "file": {
                    "$ref": "#/definitions/Export File to Share (response) Entity"
                }
            }
        },
        "Export File to Share (response) Entity": {
            "type": "object",
            "properties": {
                "fileName": {
                    "description": "The name of the exported file. (If multiple files were generated for this request, each beyond the first will start with the same name, but with a number in parentheses added just before the file extension.)",
                    "type": "string"
                },
                "_links": {
                    "$ref": "#/definitions/Export File to Share Links"
                }
            }
        },
        "Export File to Share Links": {
            "description": "Links to view the folder where the file was placed, view the file metadata, or download the file contents. The fileMetadata link can also be used to delete the file.",
            "type": "object",
            "properties": {
                "fileDownload": {
                    "$ref": "#/definitions/link"
                },
                "destinationFolder": {
                    "$ref": "#/definitions/link"
                },
                "fileMetadata": {
                    "$ref": "#/definitions/link"
                }
            }
        },
        "Forward Only Paging Links": {
            "description": "URLs for redoing the current request or getting the next page of results, if applicable. Links to the previous page are not available.",
            "type": "object",
            "properties": {
                "self": {
                    "$ref": "#/definitions/link"
                },
                "next": {
                    "$ref": "#/definitions/link"
                }
            }
        },
        "Static Image Link": {
            "description": "A URL of the static image file, which can be placed in an <img> tag's 'src' attribute.",
            "type": "object",
            "properties": {
                "imageUrl": {
                    "$ref": "#/definitions/link"
                }
            }
        },
        "link": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string"
                }
            }
        },
        "Error Response": {
            "description": "Gives details for an error that occurred while handling the request. Note that clients MUST NOT assume that every failed request will produce an object of this schema, or that all of the properties in the response will be non-null, as the error may have prevented this response from being constructed.",
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "description": "Short string indicating the general category of error that occurred. A subset of possible values includes: 'IssueNotFound', 'CommentNotFound', 'AttachmentNotFound', 'InvalidProperty', 'RequiredPropertyMissing'.",
                            "type": "string"
                        },
                        "message": {
                            "description": "Longer string explaining to developers why the error occurred.",
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "tags": []
}
